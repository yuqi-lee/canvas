#! /bin/bash

OS_DISTRO=$( awk -F= '/^NAME/{print $2}' /etc/os-release | sed -e 's/^"//' -e 's/"$//' )
if [[ ${OS_DISTRO} == "CentOS Linux" ]]
then
	echo "Running on CentOS..."
elif [[ ${OS_DISTRO} == "Ubuntu" ]]
then
	echo "Running on Ubuntu..."
fi



mem_server_ip="10.10.1.1"
mem_server_port="50000"

if [ -z "${HOME}" ]
then
	echo "set home_dir first."
	exit 1
else
	home_dir=${HOME}
fi

swap_files=(
    "/mydata/shared_swapfile"
    "/mydata/memcached_swapfile"
    "/mydata/sparkTC_swapfile"
    #"/mydata/sparkLR_swapfile"
    #"/mydata/sparkKM_swapfile"
    )

SWAP_PARTITION_SIZE_GBs=("4" "4" "32")
SWAP_PARTITION_SIZE_GB="40"

echo " !! Warning, check the parameters below : "
echo " Assigned memory server IP ${mem_server_ip} Port ${mem_server_port}"
echo " swapfile ${swap_files[*]}, size ${SWAP_PARTITION_SIZE_GB} GB"
echo " "
echo " "

action=$1
if [[ -z "${action}" ]]
then
	echo "This shellscipt for Infiniswap pre-configuration."
	echo "Run it with sudo or root"
	echo ""
	echo "Please select what to do: [install | replace | uninstall]"

	read action
fi

function close_swap_partition () {
	if [[ ${OS_DISTRO} == "CentOS Linux" ]]
	then
		swap_bd=$(swapon -s | grep "dev" | cut -d " " -f 1 )
	elif [[ ${OS_DISTRO} == "Ubuntu" ]]
	then
		swap_bd=$(swapon -s | grep "swap.img" | cut -d " " -f 1 )
		if [ -z "${swap_bd}" ]
		then
			swap_bd=$(swapon -s | grep "swapfile" | cut -d " " -f 1 )
		fi
	fi

	if [[ -z "${swap_bd}" ]]
	then
		echo "Nothing to close."
	else
		echo "Swap Partition to close :${swap_bd} "
		sudo swapoff "${swap_bd}"
	fi

	echo "Current swap partition:"
	swapon -s
}

function close_canvas_swap_file () {
    for ((i=0; i<${#swap_files[@]}; i++))
    do
        swap_file="${swap_files[$i]}"
        echo "swapoff ${swap_file}"
        sudo swapoff ${swap_file}
    done

    echo "Check the mounted swapfiles:"
    swapon -s
    echo "End."
}


function create_swap_file () {
    for ((i=0; i<${#swap_files[@]}; i++))
    do
        swap_file="${swap_files[$i]}"
        file_size="${SWAP_PARTITION_SIZE_GBs[$i]}"
        if [[ -e ${swap_file} ]]
        then
            echo "Please confirm the size of swapfile match the expected ${file_size}G"
            cur_size=$(du -sh ${swap_file} | awk '{print $1;}' | tr -cd '[[:digit:]]')
            if [[ ${cur_size} -ne "${file_size}" ]]
            then
                echo "Current ${swap_file}: ${cur_size}G NOT equal to expected ${file_size}G"
                echo "Delete it"
                sudo rm ${swap_file}

                echo "Create a file, ~/swapfile, with size ${file_size}G as swap device."
                sudo fallocate -l ${file_size}G ${swap_file}
                sudo chmod 600 ${swap_file}
            else
                echo "Existing swapfile ${swap_file} , ${cur_size}GB is euqnal or larger than we want, ${file_size}GB. Reuse it."
            fi
        else
            echo "Create a file, ~/swapfile, with size ${file_size}G as swap device."
            sudo fallocate -l ${file_size}G ${swap_file}
            sudo chmod 600 ${swap_file}
            du -sh ${swap_file}
        fi

        sleep 1
        echo "Mount the ${swap_file} as swap device"
        sudo mkswap ${swap_file}
        if [[ i -eq 0 ]]
        then
            sudo swapon ${swap_file}
        else
            sudo swapon -p 999 ${swap_file}
        fi

        swapon -s
    done
}


if [[ "${action}" = "install" ]]
then
	echo "Close current swap partition && Create swap file"
	close_swap_partition

	create_swap_file

	echo "insmod ./rswap-client.ko sip=${mem_server_ip} sport=${mem_server_port} rmsize=${SWAP_PARTITION_SIZE_GB}"
	sudo insmod ./rswap-client.ko sip=${mem_server_ip} sport=${mem_server_port} rmsize=${SWAP_PARTITION_SIZE_GB}

elif [[ "${action}" = "replace" ]]
then
	echo "rmmod rswap-client"
	sudo rmmod rswap-client
	sudo rm -rf ${swap_file}
	echo "Please restart rswap-server on mem server. Press <Enter> to continue..."

	read
	echo "insmod ./rswap-client.ko sip=${mem_server_ip} sport=${mem_server_port} rmsize=${SWAP_PARTITION_SIZE_GB}"
	sudo insmod ./rswap-client.ko sip=${mem_server_ip} sport=${mem_server_port} rmsize=${SWAP_PARTITION_SIZE_GB}

elif [[ "${action}" = "uninstall" ]]
then
	echo "Close current swap partition"
	close_swap_partition

	echo "rmmod rswap-client"
	sudo rmmod rswap-client

    echo "close Canvas swapfiles"
    close_canvas_swap_file

elif [[ "${action}" = "create_swap" ]]
then
	echo "Check the existing swapfile"
	close_swap_partition

	echo "Create swapfile"
	create_swap_file

else
	echo "!! Wrong choice : ${action}"
fi
